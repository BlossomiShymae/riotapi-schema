{
  "openapi": "3.0.0",
  "info": {
    "title": "Riot API",
    "description": "\nOpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily.\n## Download OpenAPI Spec File\nThe following versions of the Riot API spec file are available:\n- `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json))\n- `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json))\n- `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml))\n- `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml))\n- `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json))\n- `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json))\n- `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml))\n- `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml))\n## Source Code\nSource code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome!\n## Automatically Generated\nRebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily.\n***\n",
    "termsOfService": "https://developer.riotgames.com/terms-and-conditions.html",
    "version": "7624057f7adf6a1d6d17ef10c77fa53f6eec4d9c"
  },
  "servers": [
    {
      "url": "https://{platform}.api.riotgames.com",
      "variables": {
        "platform": {
          "enum": [
            "br1",
            "eun1",
            "euw1",
            "jp1",
            "kr",
            "la1",
            "la2",
            "na1",
            "oc1",
            "tr1",
            "ru",
            "pbe1"
          ],
          "default": "na1"
        }
      }
    }
  ],
  "paths": {
    "/lol/champion-mastery/v3/champion-masteries/by-summoner/{summonerId}": {
      "get": {
        "tags": [
          "champion-mastery-v3"
        ],
        "summary": "Get all champion mastery entries sorted by number of champion points descending,",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#champion-mastery-v3/GET_getAllChampionMasteries"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/champion-mastery-v3.ChampionMasteryDTO",
                    "x-type": "ChampionMasteryDTO"
                  },
                  "x-type": "List[ChampionMasteryDTO]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "champion-mastery-v3.getAllChampionMasteries",
        "description": "Get all champion mastery entries sorted by number of champion points descending,",
        "parameters": [
          {
            "name": "summonerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "Summoner ID associated with the player"
          }
        ]
      },
      "x-endpoint": "champion-mastery-v3"
    },
    "/lol/champion-mastery/v3/champion-masteries/by-summoner/{summonerId}/by-champion/{championId}": {
      "get": {
        "tags": [
          "champion-mastery-v3"
        ],
        "summary": "Get a champion mastery by player ID and champion ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#champion-mastery-v3/GET_getChampionMastery"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/champion-mastery-v3.ChampionMasteryDTO",
                  "x-type": "ChampionMasteryDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "champion-mastery-v3.getChampionMastery",
        "description": "Get a champion mastery by player ID and champion ID.",
        "parameters": [
          {
            "name": "championId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "Champion ID to retrieve Champion Mastery for"
          },
          {
            "name": "summonerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "Summoner ID associated with the player"
          }
        ]
      },
      "x-endpoint": "champion-mastery-v3"
    },
    "/lol/champion-mastery/v3/scores/by-summoner/{summonerId}": {
      "get": {
        "tags": [
          "champion-mastery-v3"
        ],
        "summary": "Get a player's total champion mastery score, which is the sum of individual champion mastery levels.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#champion-mastery-v3/GET_getChampionMasteryScore"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "x-type": "int"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "champion-mastery-v3.getChampionMasteryScore",
        "description": "Get a player's total champion mastery score, which is the sum of individual champion mastery levels.",
        "parameters": [
          {
            "name": "summonerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "Summoner ID associated with the player"
          }
        ]
      },
      "x-endpoint": "champion-mastery-v3"
    },
    "/lol/platform/v3/champions": {
      "get": {
        "tags": [
          "champion-v3"
        ],
        "summary": "Retrieve all champions.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampions"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/champion-v3.ChampionListDto",
                  "x-type": "ChampionListDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "champion-v3.getChampions",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieve all champions.\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "freeToPlay",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "x-type": "boolean"
            },
            "description": "Optional filter param to retrieve only free to play champions."
          }
        ]
      },
      "x-endpoint": "champion-v3"
    },
    "/lol/platform/v3/champions/{id}": {
      "get": {
        "tags": [
          "champion-v3"
        ],
        "summary": "Retrieve champion by ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionsById"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/champion-v3.ChampionDto",
                  "x-type": "ChampionDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "champion-v3.getChampionsById",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieve champion by ID.\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            },
            "description": "Champion ID"
          }
        ]
      },
      "x-endpoint": "champion-v3"
    },
    "/lol/league/v3/challengerleagues/by-queue/{queue}": {
      "get": {
        "tags": [
          "league-v3"
        ],
        "summary": "Get the challenger league for given queue.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#league-v3/GET_getChallengerLeague"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/league-v3.LeagueListDTO",
                  "x-type": "LeagueListDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "league-v3.getChallengerLeague",
        "description": "Get the challenger league for given queue.",
        "parameters": [
          {
            "name": "queue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string",
              "enum": [
                "RANKED_SOLO_5x5",
                "RANKED_FLEX_SR",
                "RANKED_FLEX_TT"
              ]
            }
          }
        ]
      },
      "x-endpoint": "league-v3"
    },
    "/lol/league/v3/leagues/{leagueId}": {
      "get": {
        "tags": [
          "league-v3"
        ],
        "summary": "Get league with given ID, including inactive entries.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#league-v3/GET_getLeagueById"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/league-v3.LeagueListDTO",
                  "x-type": "LeagueListDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "league-v3.getLeagueById",
        "description": "Get league with given ID, including inactive entries.",
        "parameters": [
          {
            "name": "leagueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "The UUID of the league."
          }
        ]
      },
      "x-endpoint": "league-v3"
    },
    "/lol/league/v3/masterleagues/by-queue/{queue}": {
      "get": {
        "tags": [
          "league-v3"
        ],
        "summary": "Get the master league for given queue.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#league-v3/GET_getMasterLeague"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/league-v3.LeagueListDTO",
                  "x-type": "LeagueListDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "league-v3.getMasterLeague",
        "description": "Get the master league for given queue.",
        "parameters": [
          {
            "name": "queue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string",
              "enum": [
                "RANKED_SOLO_5x5",
                "RANKED_FLEX_SR",
                "RANKED_FLEX_TT"
              ]
            }
          }
        ]
      },
      "x-endpoint": "league-v3"
    },
    "/lol/league/v3/positions/by-summoner/{summonerId}": {
      "get": {
        "tags": [
          "league-v3"
        ],
        "summary": "Get league positions in all queues for a given summoner ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#league-v3/GET_getAllLeaguePositionsForSummoner"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/league-v3.LeaguePositionDTO",
                    "x-type": "LeaguePositionDTO"
                  },
                  "x-type": "Set[LeaguePositionDTO]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "league-v3.getAllLeaguePositionsForSummoner",
        "description": "Get league positions in all queues for a given summoner ID.",
        "parameters": [
          {
            "name": "summonerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            }
          }
        ]
      },
      "x-endpoint": "league-v3"
    },
    "/lol/static-data/v3/champions": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieves champion list",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getChampionList"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lol-static-data-v3.ChampionListDto",
                  "x-type": "ChampionListDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getChampionList",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieves champion list\n## Implementation Notes\nNot all data specified below is returned by default. See the tags parameter for more information.\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string",
              "enum": [
                "cs_CZ",
                "de_DE",
                "el_GR",
                "en_AU",
                "en_GB",
                "en_PH",
                "en_PL",
                "en_SG",
                "en_US",
                "es_AR",
                "es_ES",
                "es_MX",
                "fr_FR",
                "hu_HU",
                "id_ID",
                "it_IT",
                "ja_JP",
                "ko_KR",
                "ms_MY",
                "pl_PL",
                "pt_BR",
                "ro_RO",
                "ru_RU",
                "th_TH",
                "tr_TR",
                "vn_VN",
                "zh_CN",
                "zh_MY",
                "zh_TW"
              ]
            },
            "description": "Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used."
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint."
          },
          {
            "name": "champListData",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "allytips",
                "blurb",
                "enemytips",
                "format",
                "image",
                "info",
                "keys",
                "lore",
                "partype",
                "passive",
                "recommended",
                "skins",
                "spells",
                "stats",
                "tags"
              ]
            },
            "description": "Tags to return additional data. Only type, version, data, id, key, name, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "allytips",
                "blurb",
                "enemytips",
                "format",
                "image",
                "info",
                "keys",
                "lore",
                "partype",
                "passive",
                "recommended",
                "skins",
                "spells",
                "stats",
                "tags"
              ]
            },
            "description": "Tags to return additional data. Only type, version, data, id, key, name, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          },
          {
            "name": "dataById",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "x-type": "boolean"
            },
            "description": "If specified as true, the returned data map will use the champions' IDs as the keys. If not specified or specified as false, the returned data map will use the champions' keys instead."
          }
        ]
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/champions/{id}": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieves champion by ID",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getChampionById"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lol-static-data-v3.ChampionDto",
                  "x-type": "ChampionDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getChampionById",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieves champion by ID\n## Implementation Notes\nNot all data specified below is returned by default. See the tags parameter for more information.\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "Champion ID"
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string",
              "enum": [
                "cs_CZ",
                "de_DE",
                "el_GR",
                "en_AU",
                "en_GB",
                "en_PH",
                "en_PL",
                "en_SG",
                "en_US",
                "es_AR",
                "es_ES",
                "es_MX",
                "fr_FR",
                "hu_HU",
                "id_ID",
                "it_IT",
                "ja_JP",
                "ko_KR",
                "ms_MY",
                "pl_PL",
                "pt_BR",
                "ro_RO",
                "ru_RU",
                "th_TH",
                "tr_TR",
                "vn_VN",
                "zh_CN",
                "zh_MY",
                "zh_TW"
              ]
            },
            "description": "Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used."
          },
          {
            "name": "champData",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "allytips",
                "blurb",
                "enemytips",
                "image",
                "info",
                "lore",
                "partype",
                "passive",
                "recommended",
                "skins",
                "spells",
                "stats",
                "tags"
              ]
            },
            "description": "Tags to return additional data. Only id, key, name, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint."
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "allytips",
                "blurb",
                "enemytips",
                "image",
                "info",
                "lore",
                "partype",
                "passive",
                "recommended",
                "skins",
                "spells",
                "stats",
                "tags"
              ]
            },
            "description": "Tags to return additional data. Only id, key, name, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          }
        ]
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/items": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieves item list",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getItemList"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lol-static-data-v3.ItemListDto",
                  "x-type": "ItemListDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getItemList",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieves item list\n## Implementation Notes\nNot all data specified below is returned by default. See the tags parameter for more information.\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string",
              "enum": [
                "cs_CZ",
                "de_DE",
                "el_GR",
                "en_AU",
                "en_GB",
                "en_PH",
                "en_PL",
                "en_SG",
                "en_US",
                "es_AR",
                "es_ES",
                "es_MX",
                "fr_FR",
                "hu_HU",
                "id_ID",
                "it_IT",
                "ja_JP",
                "ko_KR",
                "ms_MY",
                "pl_PL",
                "pt_BR",
                "ro_RO",
                "ru_RU",
                "th_TH",
                "tr_TR",
                "vn_VN",
                "zh_CN",
                "zh_MY",
                "zh_TW"
              ]
            },
            "description": "Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used."
          },
          {
            "name": "itemListData",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "colloq",
                "consumeOnFull",
                "consumed",
                "depth",
                "effect",
                "from",
                "gold",
                "groups",
                "hideFromAll",
                "image",
                "inStore",
                "into",
                "maps",
                "requiredChampion",
                "sanitizedDescription",
                "specialRecipe",
                "stacks",
                "stats",
                "tags",
                "tree"
              ]
            },
            "description": "Tags to return additional data. Only type, version, data, id, name, description, plaintext, and group are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint."
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "colloq",
                "consumeOnFull",
                "consumed",
                "depth",
                "effect",
                "from",
                "gold",
                "groups",
                "hideFromAll",
                "image",
                "inStore",
                "into",
                "maps",
                "requiredChampion",
                "sanitizedDescription",
                "specialRecipe",
                "stacks",
                "stats",
                "tags",
                "tree"
              ]
            },
            "description": "Tags to return additional data. Only type, version, data, id, name, description, plaintext, and group are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          }
        ]
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/items/{id}": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieves item by ID",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getItemById"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lol-static-data-v3.ItemDto",
                  "x-type": "ItemDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getItemById",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieves item by ID\n## Implementation Notes\nNot all data specified below is returned by default. See the tags parameter for more information.\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "Item ID"
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string",
              "enum": [
                "cs_CZ",
                "de_DE",
                "el_GR",
                "en_AU",
                "en_GB",
                "en_PH",
                "en_PL",
                "en_SG",
                "en_US",
                "es_AR",
                "es_ES",
                "es_MX",
                "fr_FR",
                "hu_HU",
                "id_ID",
                "it_IT",
                "ja_JP",
                "ko_KR",
                "ms_MY",
                "pl_PL",
                "pt_BR",
                "ro_RO",
                "ru_RU",
                "th_TH",
                "tr_TR",
                "vn_VN",
                "zh_CN",
                "zh_MY",
                "zh_TW"
              ]
            },
            "description": "Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used."
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "colloq",
                "consumeOnFull",
                "consumed",
                "depth",
                "effect",
                "from",
                "gold",
                "hideFromAll",
                "image",
                "inStore",
                "into",
                "maps",
                "requiredChampion",
                "sanitizedDescription",
                "specialRecipe",
                "stacks",
                "stats",
                "tags"
              ]
            },
            "description": "Tags to return additional data. Only id, name, description, plaintext, and group are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint."
          },
          {
            "name": "itemData",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "colloq",
                "consumeOnFull",
                "consumed",
                "depth",
                "effect",
                "from",
                "gold",
                "hideFromAll",
                "image",
                "inStore",
                "into",
                "maps",
                "requiredChampion",
                "sanitizedDescription",
                "specialRecipe",
                "stacks",
                "stats",
                "tags"
              ]
            },
            "description": "Tags to return additional data. Only id, name, description, plaintext, and group are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          }
        ]
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/language-strings": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieve language strings data",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getLanguageStrings"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lol-static-data-v3.LanguageStringsDto",
                  "x-type": "LanguageStringsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getLanguageStrings",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieve language strings data\n## Implementation Notes\nLanguage strings data was not generated for patch version 7.4.2.\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string",
              "enum": [
                "cs_CZ",
                "de_DE",
                "el_GR",
                "en_AU",
                "en_GB",
                "en_PH",
                "en_PL",
                "en_SG",
                "en_US",
                "es_AR",
                "es_ES",
                "es_MX",
                "fr_FR",
                "hu_HU",
                "id_ID",
                "it_IT",
                "ja_JP",
                "ko_KR",
                "ms_MY",
                "pl_PL",
                "pt_BR",
                "ro_RO",
                "ru_RU",
                "th_TH",
                "tr_TR",
                "vn_VN",
                "zh_CN",
                "zh_MY",
                "zh_TW"
              ]
            },
            "description": "Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used."
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint."
          }
        ]
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/languages": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieve supported languages data",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getLanguages"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "x-type": "string"
                  },
                  "x-type": "List[string]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getLanguages",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieve supported languages data\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits."
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/maps": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieve map data",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getMapData"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lol-static-data-v3.MapDataDto",
                  "x-type": "MapDataDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getMapData",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieve map data\n## Implementation Notes\nThis endpoint is only supported for patch version 5.5.3 and later. Also, map data was not generated for patch versions 5.15.1, 5.16.1, and 5.17.1.\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string",
              "enum": [
                "cs_CZ",
                "de_DE",
                "el_GR",
                "en_AU",
                "en_GB",
                "en_PH",
                "en_PL",
                "en_SG",
                "en_US",
                "es_AR",
                "es_ES",
                "es_MX",
                "fr_FR",
                "hu_HU",
                "id_ID",
                "it_IT",
                "ja_JP",
                "ko_KR",
                "ms_MY",
                "pl_PL",
                "pt_BR",
                "ro_RO",
                "ru_RU",
                "th_TH",
                "tr_TR",
                "vn_VN",
                "zh_CN",
                "zh_MY",
                "zh_TW"
              ]
            },
            "description": "Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used."
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint."
          }
        ]
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/masteries": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieves mastery list",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getMasteryList"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lol-static-data-v3.MasteryListDto",
                  "x-type": "MasteryListDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getMasteryList",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieves mastery list\n## Implementation Notes\nNot all data specified below is returned by default. See the tags parameter for more information.\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string",
              "enum": [
                "cs_CZ",
                "de_DE",
                "el_GR",
                "en_AU",
                "en_GB",
                "en_PH",
                "en_PL",
                "en_SG",
                "en_US",
                "es_AR",
                "es_ES",
                "es_MX",
                "fr_FR",
                "hu_HU",
                "id_ID",
                "it_IT",
                "ja_JP",
                "ko_KR",
                "ms_MY",
                "pl_PL",
                "pt_BR",
                "ro_RO",
                "ru_RU",
                "th_TH",
                "tr_TR",
                "vn_VN",
                "zh_CN",
                "zh_MY",
                "zh_TW"
              ]
            },
            "description": "Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used."
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint."
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "image",
                "masteryTree",
                "prereq",
                "ranks",
                "sanitizedDescription",
                "tree"
              ]
            },
            "description": "Tags to return additional data. Only type, version, data, id, name, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          },
          {
            "name": "masteryListData",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "image",
                "masteryTree",
                "prereq",
                "ranks",
                "sanitizedDescription",
                "tree"
              ]
            },
            "description": "Tags to return additional data. Only type, version, data, id, name, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          }
        ]
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/masteries/{id}": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieves mastery item by ID",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getMasteryById"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lol-static-data-v3.MasteryDto",
                  "x-type": "MasteryDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getMasteryById",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieves mastery item by ID\n## Implementation Notes\nNot all data specified below is returned by default. See the tags parameter for more information.\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "Mastery ID"
          },
          {
            "name": "masteryData",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "image",
                "masteryTree",
                "prereq",
                "ranks",
                "sanitizedDescription"
              ]
            },
            "description": "Tags to return additional data. Only id, name, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string",
              "enum": [
                "cs_CZ",
                "de_DE",
                "el_GR",
                "en_AU",
                "en_GB",
                "en_PH",
                "en_PL",
                "en_SG",
                "en_US",
                "es_AR",
                "es_ES",
                "es_MX",
                "fr_FR",
                "hu_HU",
                "id_ID",
                "it_IT",
                "ja_JP",
                "ko_KR",
                "ms_MY",
                "pl_PL",
                "pt_BR",
                "ro_RO",
                "ru_RU",
                "th_TH",
                "tr_TR",
                "vn_VN",
                "zh_CN",
                "zh_MY",
                "zh_TW"
              ]
            },
            "description": "Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used."
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint."
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "image",
                "masteryTree",
                "prereq",
                "ranks",
                "sanitizedDescription"
              ]
            },
            "description": "Tags to return additional data. Only id, name, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          }
        ]
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/profile-icons": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieve profile icons",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getProfileIcons"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lol-static-data-v3.ProfileIconDataDto",
                  "x-type": "ProfileIconDataDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getProfileIcons",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieve profile icons\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string",
              "enum": [
                "cs_CZ",
                "de_DE",
                "el_GR",
                "en_AU",
                "en_GB",
                "en_PH",
                "en_PL",
                "en_SG",
                "en_US",
                "es_AR",
                "es_ES",
                "es_MX",
                "fr_FR",
                "hu_HU",
                "id_ID",
                "it_IT",
                "ja_JP",
                "ko_KR",
                "ms_MY",
                "pl_PL",
                "pt_BR",
                "ro_RO",
                "ru_RU",
                "th_TH",
                "tr_TR",
                "vn_VN",
                "zh_CN",
                "zh_MY",
                "zh_TW"
              ]
            },
            "description": "Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used."
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint."
          }
        ]
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/realms": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieve realm data",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getRealm"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lol-static-data-v3.RealmDto",
                  "x-type": "RealmDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getRealm",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieve realm data\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits."
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/reforged-rune-paths": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieves reforged rune path list",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getReforgedRunePaths"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/lol-static-data-v3.ReforgedRunePathDto",
                    "x-type": "ReforgedRunePathDto"
                  },
                  "x-type": "List[ReforgedRunePathDto]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getReforgedRunePaths",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieves reforged rune path list\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint."
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used."
          }
        ]
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/reforged-rune-paths/{id}": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieves reforged rune path by ID",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getReforgedRunePathById"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lol-static-data-v3.ReforgedRunePathDto",
                  "x-type": "ReforgedRunePathDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getReforgedRunePathById",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieves reforged rune path by ID\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            },
            "description": "Reforged rune path ID"
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint."
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used."
          }
        ]
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/reforged-runes": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieves reforged rune list",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getReforgedRunes"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/lol-static-data-v3.ReforgedRuneDto",
                    "x-type": "ReforgedRuneDto"
                  },
                  "x-type": "List[ReforgedRuneDto]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getReforgedRunes",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieves reforged rune list\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint."
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used."
          }
        ]
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/reforged-runes/{id}": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieves reforged rune by ID",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getReforgedRuneById"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lol-static-data-v3.ReforgedRuneDto",
                  "x-type": "ReforgedRuneDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getReforgedRuneById",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieves reforged rune by ID\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            },
            "description": "Reforged rune ID"
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint."
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used."
          }
        ]
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/runes": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieves rune list",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getRuneList"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lol-static-data-v3.RuneListDto",
                  "x-type": "RuneListDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getRuneList",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieves rune list\n## Implementation Notes\nNot all data specified below is returned by default. See the tags parameter for more information.\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string",
              "enum": [
                "cs_CZ",
                "de_DE",
                "el_GR",
                "en_AU",
                "en_GB",
                "en_PH",
                "en_PL",
                "en_SG",
                "en_US",
                "es_AR",
                "es_ES",
                "es_MX",
                "fr_FR",
                "hu_HU",
                "id_ID",
                "it_IT",
                "ja_JP",
                "ko_KR",
                "ms_MY",
                "pl_PL",
                "pt_BR",
                "ro_RO",
                "ru_RU",
                "th_TH",
                "tr_TR",
                "vn_VN",
                "zh_CN",
                "zh_MY",
                "zh_TW"
              ]
            },
            "description": "Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used."
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint."
          },
          {
            "name": "runeListData",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "image",
                "sanitizedDescription",
                "stats",
                "tags"
              ]
            },
            "description": "Tags to return additional data. Only type, version, data, id, name, description, and rune are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "image",
                "sanitizedDescription",
                "stats",
                "tags"
              ]
            },
            "description": "Tags to return additional data. Only type, version, data, id, name, description, and rune are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          }
        ]
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/runes/{id}": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieves rune by ID",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getRuneById"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lol-static-data-v3.RuneDto",
                  "x-type": "RuneDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getRuneById",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieves rune by ID\n## Implementation Notes\nNot all data specified below is returned by default. See the tags parameter for more information.\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "Rune ID"
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "image",
                "sanitizedDescription",
                "stats",
                "tags"
              ]
            },
            "description": "Tags to return additional data. Only id, name, description, and rune are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string",
              "enum": [
                "cs_CZ",
                "de_DE",
                "el_GR",
                "en_AU",
                "en_GB",
                "en_PH",
                "en_PL",
                "en_SG",
                "en_US",
                "es_AR",
                "es_ES",
                "es_MX",
                "fr_FR",
                "hu_HU",
                "id_ID",
                "it_IT",
                "ja_JP",
                "ko_KR",
                "ms_MY",
                "pl_PL",
                "pt_BR",
                "ro_RO",
                "ru_RU",
                "th_TH",
                "tr_TR",
                "vn_VN",
                "zh_CN",
                "zh_MY",
                "zh_TW"
              ]
            },
            "description": "Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used."
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint."
          },
          {
            "name": "runeData",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "image",
                "sanitizedDescription",
                "stats",
                "tags"
              ]
            },
            "description": "Tags to return additional data. Only id, name, description, and rune are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          }
        ]
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/summoner-spells": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieves summoner spell list",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getSummonerSpellList"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lol-static-data-v3.SummonerSpellListDto",
                  "x-type": "SummonerSpellListDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getSummonerSpellList",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieves summoner spell list\n## Implementation Notes\nNot all data specified below is returned by default. See the tags parameter for more information.\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string",
              "enum": [
                "cs_CZ",
                "de_DE",
                "el_GR",
                "en_AU",
                "en_GB",
                "en_PH",
                "en_PL",
                "en_SG",
                "en_US",
                "es_AR",
                "es_ES",
                "es_MX",
                "fr_FR",
                "hu_HU",
                "id_ID",
                "it_IT",
                "ja_JP",
                "ko_KR",
                "ms_MY",
                "pl_PL",
                "pt_BR",
                "ro_RO",
                "ru_RU",
                "th_TH",
                "tr_TR",
                "vn_VN",
                "zh_CN",
                "zh_MY",
                "zh_TW"
              ]
            },
            "description": "Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used."
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint."
          },
          {
            "name": "spellListData",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "cooldown",
                "cooldownBurn",
                "cost",
                "costBurn",
                "costType",
                "effect",
                "effectBurn",
                "image",
                "key",
                "leveltip",
                "maxrank",
                "modes",
                "range",
                "rangeBurn",
                "resource",
                "sanitizedDescription",
                "sanitizedTooltip",
                "tooltip",
                "vars"
              ]
            },
            "description": "Tags to return additional data. Only type, version, data, id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          },
          {
            "name": "dataById",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "x-type": "boolean"
            },
            "description": "If specified as true, the returned data map will use the spells' IDs as the keys. If not specified or specified as false, the returned data map will use the spells' keys instead."
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "cooldown",
                "cooldownBurn",
                "cost",
                "costBurn",
                "costType",
                "effect",
                "effectBurn",
                "image",
                "key",
                "leveltip",
                "maxrank",
                "modes",
                "range",
                "rangeBurn",
                "resource",
                "sanitizedDescription",
                "sanitizedTooltip",
                "tooltip",
                "vars"
              ]
            },
            "description": "Tags to return additional data. Only type, version, data, id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          }
        ]
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/summoner-spells/{id}": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieves summoner spell by ID",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getSummonerSpellById"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lol-static-data-v3.SummonerSpellDto",
                  "x-type": "SummonerSpellDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getSummonerSpellById",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieves summoner spell by ID\n## Implementation Notes\nNot all data specified below is returned by default. See the tags parameter for more information.\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "Summoner spell ID"
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string",
              "enum": [
                "cs_CZ",
                "de_DE",
                "el_GR",
                "en_AU",
                "en_GB",
                "en_PH",
                "en_PL",
                "en_SG",
                "en_US",
                "es_AR",
                "es_ES",
                "es_MX",
                "fr_FR",
                "hu_HU",
                "id_ID",
                "it_IT",
                "ja_JP",
                "ko_KR",
                "ms_MY",
                "pl_PL",
                "pt_BR",
                "ro_RO",
                "ru_RU",
                "th_TH",
                "tr_TR",
                "vn_VN",
                "zh_CN",
                "zh_MY",
                "zh_TW"
              ]
            },
            "description": "Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used."
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint."
          },
          {
            "name": "spellData",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "cooldown",
                "cooldownBurn",
                "cost",
                "costBurn",
                "costType",
                "effect",
                "effectBurn",
                "image",
                "key",
                "leveltip",
                "maxrank",
                "modes",
                "range",
                "rangeBurn",
                "resource",
                "sanitizedDescription",
                "sanitizedTooltip",
                "tooltip",
                "vars"
              ]
            },
            "description": "Tags to return additional data. Only id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-type": "string"
              },
              "x-type": "Set[string]",
              "enum": [
                "all",
                "cooldown",
                "cooldownBurn",
                "cost",
                "costBurn",
                "costType",
                "effect",
                "effectBurn",
                "image",
                "key",
                "leveltip",
                "maxrank",
                "modes",
                "range",
                "rangeBurn",
                "resource",
                "sanitizedDescription",
                "sanitizedTooltip",
                "tooltip",
                "vars"
              ]
            },
            "description": "Tags to return additional data. Only id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.",
            "explode": true
          }
        ]
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/tarball-links": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieves full tarball link",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getFullTarballLink"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "x-type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getFullTarballLink",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieves full tarball link\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Patch version for returned data. If not specified, the latest version is used. List of valid versions can be obtained from the /versions endpoint."
          }
        ]
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/static-data/v3/versions": {
      "get": {
        "tags": [
          "lol-static-data-v3"
        ],
        "summary": "Retrieve version data",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getVersions"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "x-type": "string"
                  },
                  "x-type": "List[string]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-static-data-v3.getVersions",
        "x-app-rate-limit-excluded": true,
        "description": "Retrieve version data\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits."
      },
      "x-endpoint": "lol-static-data-v3"
    },
    "/lol/status/v3/shard-data": {
      "get": {
        "tags": [
          "lol-status-v3"
        ],
        "summary": "Get League of Legends status for the given shard.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-status-v3/GET_getShardData"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lol-status-v3.ShardStatus",
                  "x-type": "ShardStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-status-v3.getShardData",
        "x-app-rate-limit-excluded": true,
        "description": "Get League of Legends status for the given shard.\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits."
      },
      "x-endpoint": "lol-status-v3"
    },
    "/lol/match/v3/matches/by-tournament-code/{tournamentCode}/ids": {
      "get": {
        "tags": [
          "match-v3"
        ],
        "summary": "Get match IDs by tournament code.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#match-v3/GET_getMatchIdsByTournamentCode"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64",
                    "x-type": "long"
                  },
                  "x-type": "List[long]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "match-v3.getMatchIdsByTournamentCode",
        "description": "Get match IDs by tournament code.",
        "parameters": [
          {
            "name": "tournamentCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "The tournament code."
          }
        ]
      },
      "x-endpoint": "match-v3"
    },
    "/lol/match/v3/matches/{matchId}": {
      "get": {
        "tags": [
          "match-v3"
        ],
        "summary": "Get match by match ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#match-v3/GET_getMatch"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/match-v3.MatchDto",
                  "x-type": "MatchDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "match-v3.getMatch",
        "description": "Get match by match ID.",
        "parameters": [
          {
            "name": "matchId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "The match ID."
          }
        ]
      },
      "x-endpoint": "match-v3"
    },
    "/lol/match/v3/matches/{matchId}/by-tournament-code/{tournamentCode}": {
      "get": {
        "tags": [
          "match-v3"
        ],
        "summary": "Get match by match ID and tournament code.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#match-v3/GET_getMatchByTournamentCode"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/match-v3.MatchDto",
                  "x-type": "MatchDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "match-v3.getMatchByTournamentCode",
        "description": "Get match by match ID and tournament code.",
        "parameters": [
          {
            "name": "matchId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "The match ID."
          },
          {
            "name": "tournamentCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "The tournament code."
          }
        ]
      },
      "x-endpoint": "match-v3"
    },
    "/lol/match/v3/matchlists/by-account/{accountId}": {
      "get": {
        "tags": [
          "match-v3"
        ],
        "summary": "Get matchlist for games played on given account ID and platform ID and filtered using given filter parameters, if any.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#match-v3/GET_getMatchlist"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/match-v3.MatchlistDto",
                  "x-type": "MatchlistDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "match-v3.getMatchlist",
        "description": "Get matchlist for games played on given account ID and platform ID and filtered using given filter parameters, if any.\n## Implementation Notes\nA number of optional parameters are provided for filtering. It is up to the caller to ensure that the combination of filter parameters provided is valid for the requested account, otherwise, no matches may be returned.\n\nIf beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.\n\nIf beginTime is specified, but not endTime, then these parameters are ignored. If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "The account ID."
          },
          {
            "name": "endTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "The end time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then these parameters are ignored. If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned."
          },
          {
            "name": "beginIndex",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            },
            "description": "The begin index to use for filtering matchlist.  If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned."
          },
          {
            "name": "beginTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "The begin time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then these parameters are ignored. If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned."
          },
          {
            "name": "champion",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32",
                "x-type": "int"
              },
              "x-type": "Set[int]"
            },
            "description": "Set of champion IDs for filtering the matchlist.",
            "explode": true
          },
          {
            "name": "endIndex",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            },
            "description": "The end index to use for filtering matchlist. If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned."
          },
          {
            "name": "queue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32",
                "x-type": "int"
              },
              "x-type": "Set[int]"
            },
            "description": "Set of queue IDs for filtering the matchlist.",
            "explode": true
          },
          {
            "name": "season",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32",
                "x-type": "int"
              },
              "x-type": "Set[int]"
            },
            "description": "Set of season IDs for filtering the matchlist.",
            "explode": true
          }
        ]
      },
      "x-endpoint": "match-v3"
    },
    "/lol/match/v3/matchlists/by-account/{accountId}/recent": {
      "get": {
        "tags": [
          "match-v3"
        ],
        "summary": "Get matchlist for last 20 matches played on given account ID and platform ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#match-v3/GET_getRecentMatchlist"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/match-v3.MatchlistDto",
                  "x-type": "MatchlistDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "match-v3.getRecentMatchlist",
        "description": "Get matchlist for last 20 matches played on given account ID and platform ID.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "The account ID."
          }
        ]
      },
      "x-endpoint": "match-v3"
    },
    "/lol/match/v3/timelines/by-match/{matchId}": {
      "get": {
        "tags": [
          "match-v3"
        ],
        "summary": "Get match timeline by match ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#match-v3/GET_getMatchTimeline"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/match-v3.MatchTimelineDto",
                  "x-type": "MatchTimelineDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "match-v3.getMatchTimeline",
        "description": "Get match timeline by match ID.\n## Implementation Notes\nNot all matches have timeline data.",
        "parameters": [
          {
            "name": "matchId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "The match ID."
          }
        ]
      },
      "x-endpoint": "match-v3"
    },
    "/lol/spectator/v3/active-games/by-summoner/{summonerId}": {
      "get": {
        "tags": [
          "spectator-v3"
        ],
        "summary": "Get current game information for the given summoner ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#spectator-v3/GET_getCurrentGameInfoBySummoner"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spectator-v3.CurrentGameInfo",
                  "x-type": "CurrentGameInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "spectator-v3.getCurrentGameInfoBySummoner",
        "description": "Get current game information for the given summoner ID.",
        "parameters": [
          {
            "name": "summonerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "The ID of the summoner."
          }
        ]
      },
      "x-endpoint": "spectator-v3"
    },
    "/lol/spectator/v3/featured-games": {
      "get": {
        "tags": [
          "spectator-v3"
        ],
        "summary": "Get list of featured games.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#spectator-v3/GET_getFeaturedGames"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spectator-v3.FeaturedGames",
                  "x-type": "FeaturedGames"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "spectator-v3.getFeaturedGames",
        "description": "Get list of featured games."
      },
      "x-endpoint": "spectator-v3"
    },
    "/lol/summoner/v3/summoners/by-account/{accountId}": {
      "get": {
        "tags": [
          "summoner-v3"
        ],
        "summary": "Get a summoner by account ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#summoner-v3/GET_getByAccountId"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/summoner-v3.SummonerDTO",
                  "x-type": "SummonerDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "summoner-v3.getByAccountId",
        "description": "Get a summoner by account ID.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            }
          }
        ]
      },
      "x-endpoint": "summoner-v3"
    },
    "/lol/summoner/v3/summoners/by-name/{summonerName}": {
      "get": {
        "tags": [
          "summoner-v3"
        ],
        "summary": "Get a summoner by summoner name.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#summoner-v3/GET_getBySummonerName"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/summoner-v3.SummonerDTO",
                  "x-type": "SummonerDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "summoner-v3.getBySummonerName",
        "description": "Get a summoner by summoner name.",
        "parameters": [
          {
            "name": "summonerName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Summoner Name"
          }
        ]
      },
      "x-endpoint": "summoner-v3"
    },
    "/lol/summoner/v3/summoners/{summonerId}": {
      "get": {
        "tags": [
          "summoner-v3"
        ],
        "summary": "Get a summoner by summoner ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#summoner-v3/GET_getBySummonerId"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/summoner-v3.SummonerDTO",
                  "x-type": "SummonerDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "summoner-v3.getBySummonerId",
        "description": "Get a summoner by summoner ID.",
        "parameters": [
          {
            "name": "summonerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "Summoner ID"
          }
        ]
      },
      "x-endpoint": "summoner-v3"
    },
    "/lol/platform/v3/third-party-code/by-summoner/{summonerId}": {
      "get": {
        "tags": [
          "third-party-code-v3"
        ],
        "summary": "Get third party code for a given summoner ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#third-party-code-v3/GET_getThirdPartyCodeBySummonerId"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "x-type": "String"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "third-party-code-v3.getThirdPartyCodeBySummonerId",
        "x-app-rate-limit-excluded": true,
        "description": "Get third party code for a given summoner ID.\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits.",
        "parameters": [
          {
            "name": "summonerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "Summoner ID"
          }
        ]
      },
      "x-endpoint": "third-party-code-v3"
    },
    "/lol/tournament-stub/v3/codes": {
      "post": {
        "tags": [
          "tournament-stub-v3"
        ],
        "summary": "Create a mock tournament code for the given tournament.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-stub-v3/POST_createTournamentCode"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "x-type": "string"
                  },
                  "x-type": "List[string]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid API key specified"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-stub-v3.createTournamentCode",
        "description": "Create a mock tournament code for the given tournament.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tournament-stub-v3.TournamentCodeParameters",
                "x-type": "TournamentCodeParameters"
              }
            }
          },
          "required": true,
          "description": "Metadata for the generated code"
        },
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            },
            "description": "The number of codes to create (max 1000)"
          },
          {
            "name": "tournamentId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "The tournament ID"
          }
        ]
      },
      "x-endpoint": "tournament-stub-v3"
    },
    "/lol/tournament-stub/v3/lobby-events/by-code/{tournamentCode}": {
      "get": {
        "tags": [
          "tournament-stub-v3"
        ],
        "summary": "Gets a mock list of lobby events by tournament code.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-stub-v3/GET_getLobbyEventsByCode"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tournament-stub-v3.LobbyEventDTOWrapper",
                  "x-type": "LobbyEventDTOWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid API key specified"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-stub-v3.getLobbyEventsByCode",
        "description": "Gets a mock list of lobby events by tournament code.",
        "parameters": [
          {
            "name": "tournamentCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "The short code to look up lobby events for"
          }
        ]
      },
      "x-endpoint": "tournament-stub-v3"
    },
    "/lol/tournament-stub/v3/providers": {
      "post": {
        "tags": [
          "tournament-stub-v3"
        ],
        "summary": "Creates a mock tournament provider and returns its ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-stub-v3/POST_registerProviderData"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "x-type": "int"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid API key specified"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-stub-v3.registerProviderData",
        "description": "Creates a mock tournament provider and returns its ID.\n## Implementation Notes\nProviders will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tournament-stub-v3.ProviderRegistrationParameters",
                "x-type": "ProviderRegistrationParameters"
              }
            }
          },
          "required": true,
          "description": "The provider definition."
        }
      },
      "x-endpoint": "tournament-stub-v3"
    },
    "/lol/tournament-stub/v3/tournaments": {
      "post": {
        "tags": [
          "tournament-stub-v3"
        ],
        "summary": "Creates a mock tournament and returns its ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-stub-v3/POST_registerTournament"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "x-type": "int"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid API key specified"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-stub-v3.registerTournament",
        "description": "Creates a mock tournament and returns its ID.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tournament-stub-v3.TournamentRegistrationParameters",
                "x-type": "TournamentRegistrationParameters"
              }
            }
          },
          "required": true,
          "description": "The tournament definition."
        }
      },
      "x-endpoint": "tournament-stub-v3"
    },
    "/lol/tournament/v3/codes": {
      "post": {
        "tags": [
          "tournament-v3"
        ],
        "summary": "Create a tournament code for the given tournament.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-v3/POST_createTournamentCode"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "x-type": "string"
                  },
                  "x-type": "List[string]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid API key specified"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-v3.createTournamentCode",
        "description": "Create a tournament code for the given tournament.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tournament-v3.TournamentCodeParameters",
                "x-type": "TournamentCodeParameters"
              }
            }
          },
          "required": true,
          "description": "Metadata for the generated code"
        },
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            },
            "description": "The number of codes to create (max 1000)"
          },
          {
            "name": "tournamentId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "The tournament ID"
          }
        ]
      },
      "x-endpoint": "tournament-v3"
    },
    "/lol/tournament/v3/codes/{tournamentCode}": {
      "put": {
        "tags": [
          "tournament-v3"
        ],
        "summary": "Update the pick type, map, spectator type, or allowed summoners for a code.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-v3/PUT_updateCode"
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid API key specified"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-v3.updateCode",
        "description": "Update the pick type, map, spectator type, or allowed summoners for a code.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tournament-v3.TournamentCodeUpdateParameters",
                "x-type": "TournamentCodeUpdateParameters"
              }
            }
          },
          "required": false,
          "description": "The fields to update"
        },
        "parameters": [
          {
            "name": "tournamentCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "The tournament code to update"
          }
        ]
      },
      "x-endpoint": "tournament-v3",
      "get": {
        "tags": [
          "tournament-v3"
        ],
        "summary": "Returns the tournament code DTO associated with a tournament code string.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-v3/GET_getTournamentCode"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tournament-v3.TournamentCodeDTO",
                  "x-type": "TournamentCodeDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid API key specified"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-v3.getTournamentCode",
        "description": "Returns the tournament code DTO associated with a tournament code string.",
        "parameters": [
          {
            "name": "tournamentCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "The tournament code string."
          }
        ]
      }
    },
    "/lol/tournament/v3/lobby-events/by-code/{tournamentCode}": {
      "get": {
        "tags": [
          "tournament-v3"
        ],
        "summary": "Gets a list of lobby events by tournament code.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-v3/GET_getLobbyEventsByCode"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tournament-v3.LobbyEventDTOWrapper",
                  "x-type": "LobbyEventDTOWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid API key specified"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-v3.getLobbyEventsByCode",
        "description": "Gets a list of lobby events by tournament code.",
        "parameters": [
          {
            "name": "tournamentCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "The short code to look up lobby events for"
          }
        ]
      },
      "x-endpoint": "tournament-v3"
    },
    "/lol/tournament/v3/providers": {
      "post": {
        "tags": [
          "tournament-v3"
        ],
        "summary": "Creates a tournament provider and returns its ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-v3/POST_registerProviderData"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "x-type": "int"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid API key specified"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-v3.registerProviderData",
        "description": "Creates a tournament provider and returns its ID.\n## Implementation Notes\nProviders will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tournament-v3.ProviderRegistrationParameters",
                "x-type": "ProviderRegistrationParameters"
              }
            }
          },
          "required": true,
          "description": "The provider definition."
        }
      },
      "x-endpoint": "tournament-v3"
    },
    "/lol/tournament/v3/tournaments": {
      "post": {
        "tags": [
          "tournament-v3"
        ],
        "summary": "Creates a tournament and returns its ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-v3/POST_registerTournament"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "x-type": "int"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid API key specified"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "422": {
            "description": "Player exists, but hasn't played since match history collection began"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-v3.registerTournament",
        "description": "Creates a tournament and returns its ID.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tournament-v3.TournamentRegistrationParameters",
                "x-type": "TournamentRegistrationParameters"
              }
            }
          },
          "required": true,
          "description": "The tournament definition."
        }
      },
      "x-endpoint": "tournament-v3"
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "status_code": {
                "type": "integer"
              },
              "message": {
                "type": "string"
              }
            }
          }
        }
      },
      "champion-mastery-v3.ChampionMasteryDTO": {
        "type": "object",
        "title": "ChampionMasteryDTO",
        "properties": {
          "chestGranted": {
            "type": "boolean",
            "x-type": "boolean",
            "description": "Is chest granted for this champion or not in current season."
          },
          "championLevel": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Champion level for specified player and champion combination."
          },
          "championPoints": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Total number of champion points for this player and champion combination - they are used to determine championLevel."
          },
          "championId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Champion ID for this entry."
          },
          "playerId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Player ID for this entry."
          },
          "championPointsUntilNextLevel": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion."
          },
          "tokensEarned": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "The token earned for this champion to levelup."
          },
          "championPointsSinceLastLevel": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Number of points earned since current level has been achieved."
          },
          "lastPlayTime": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Last time this champion was played by this player - in Unix milliseconds time format."
          }
        },
        "description": "This object contains single Champion Mastery information for player and champion combination."
      },
      "champion-v3.ChampionListDto": {
        "type": "object",
        "title": "ChampionListDto",
        "properties": {
          "champions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/champion-v3.ChampionDto",
              "x-type": "ChampionDto"
            },
            "x-type": "List[ChampionDto]",
            "description": "The collection of champion information."
          }
        },
        "description": "This object contains a collection of champion information."
      },
      "champion-v3.ChampionDto": {
        "type": "object",
        "title": "ChampionDto",
        "properties": {
          "rankedPlayEnabled": {
            "type": "boolean",
            "x-type": "boolean",
            "description": "Ranked play enabled flag."
          },
          "botEnabled": {
            "type": "boolean",
            "x-type": "boolean",
            "description": "Bot enabled flag (for custom games)."
          },
          "botMmEnabled": {
            "type": "boolean",
            "x-type": "boolean",
            "description": "Bot Match Made enabled flag (for Co-op vs. AI games)."
          },
          "active": {
            "type": "boolean",
            "x-type": "boolean",
            "description": "Indicates if the champion is active."
          },
          "freeToPlay": {
            "type": "boolean",
            "x-type": "boolean",
            "description": "Indicates if the champion is free to play. Free to play champions are rotated periodically."
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Champion ID. For static information correlating to champion IDs, please refer to the LoL Static Data API."
          }
        },
        "description": "This object contains champion information."
      },
      "league-v3.LeagueListDTO": {
        "type": "object",
        "title": "LeagueListDTO",
        "properties": {
          "leagueId": {
            "type": "string",
            "x-type": "string"
          },
          "tier": {
            "type": "string",
            "x-type": "string"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/league-v3.LeaguePositionDTO",
              "x-type": "LeagueItemDTO"
            },
            "x-type": "List[LeagueItemDTO]"
          },
          "queue": {
            "type": "string",
            "x-type": "string"
          },
          "name": {
            "type": "string",
            "x-type": "string"
          }
        }
      },
      "league-v3.MiniSeriesDTO": {
        "type": "object",
        "title": "MiniSeriesDTO",
        "properties": {
          "wins": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "losses": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "target": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "progress": {
            "type": "string",
            "x-type": "string"
          }
        }
      },
      "league-v3.LeaguePositionDTO": {
        "type": "object",
        "title": "LeaguePositionDTO",
        "properties": {
          "rank": {
            "type": "string",
            "x-type": "string"
          },
          "queueType": {
            "type": "string",
            "x-type": "string"
          },
          "hotStreak": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "miniSeries": {
            "$ref": "#/components/schemas/league-v3.MiniSeriesDTO",
            "x-type": "MiniSeriesDTO"
          },
          "wins": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "veteran": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "losses": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "freshBlood": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "leagueId": {
            "type": "string",
            "x-type": "string"
          },
          "playerOrTeamName": {
            "type": "string",
            "x-type": "string"
          },
          "inactive": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "playerOrTeamId": {
            "type": "string",
            "x-type": "string"
          },
          "leagueName": {
            "type": "string",
            "x-type": "string"
          },
          "tier": {
            "type": "string",
            "x-type": "string"
          },
          "leaguePoints": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        }
      },
      "lol-static-data-v3.ReforgedRunePathDto": {
        "type": "object",
        "title": "ReforgedRunePathDto",
        "properties": {
          "slots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/lol-static-data-v3.ReforgedRuneSlotDto",
              "x-type": "ReforgedRuneSlotDto"
            },
            "x-type": "List[ReforgedRuneSlotDto]"
          },
          "icon": {
            "type": "string",
            "x-type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "key": {
            "type": "string",
            "x-type": "string"
          },
          "name": {
            "type": "string",
            "x-type": "string"
          }
        },
        "description": "This object contains reforged rune path data."
      },
      "lol-static-data-v3.ReforgedRuneSlotDto": {
        "type": "object",
        "title": "ReforgedRuneSlotDto",
        "properties": {
          "runes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/lol-static-data-v3.ReforgedRuneDto",
              "x-type": "ReforgedRuneDto"
            },
            "x-type": "List[ReforgedRuneDto]"
          }
        },
        "description": "This object contains reforged rune slot data."
      },
      "lol-static-data-v3.ReforgedRuneDto": {
        "type": "object",
        "title": "ReforgedRuneDto",
        "properties": {
          "runePathName": {
            "type": "string",
            "x-type": "string"
          },
          "runePathId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "name": {
            "type": "string",
            "x-type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "key": {
            "type": "string",
            "x-type": "string"
          },
          "shortDesc": {
            "type": "string",
            "x-type": "string"
          },
          "longDesc": {
            "type": "string",
            "x-type": "string"
          },
          "icon": {
            "type": "string",
            "x-type": "string"
          }
        },
        "description": "This object contains reforged rune data."
      },
      "lol-status-v3.ShardStatus": {
        "type": "object",
        "title": "ShardStatus",
        "properties": {
          "name": {
            "type": "string",
            "x-type": "string"
          },
          "region_tag": {
            "type": "string",
            "x-type": "string"
          },
          "hostname": {
            "type": "string",
            "x-type": "string"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/lol-status-v3.Service",
              "x-type": "Service"
            },
            "x-type": "List[Service]"
          },
          "slug": {
            "type": "string",
            "x-type": "string"
          },
          "locales": {
            "type": "array",
            "items": {
              "type": "string",
              "x-type": "string"
            },
            "x-type": "List[string]"
          }
        }
      },
      "lol-status-v3.Service": {
        "type": "object",
        "title": "Service",
        "properties": {
          "status": {
            "type": "string",
            "x-type": "string"
          },
          "incidents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/lol-status-v3.Incident",
              "x-type": "Incident"
            },
            "x-type": "List[Incident]"
          },
          "name": {
            "type": "string",
            "x-type": "string"
          },
          "slug": {
            "type": "string",
            "x-type": "string"
          }
        }
      },
      "lol-status-v3.Incident": {
        "type": "object",
        "title": "Incident",
        "properties": {
          "active": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "created_at": {
            "type": "string",
            "x-type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/lol-status-v3.Message",
              "x-type": "Message"
            },
            "x-type": "List[Message]"
          }
        }
      },
      "lol-status-v3.Message": {
        "type": "object",
        "title": "Message",
        "properties": {
          "severity": {
            "type": "string",
            "x-type": "string"
          },
          "author": {
            "type": "string",
            "x-type": "string"
          },
          "created_at": {
            "type": "string",
            "x-type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/lol-status-v3.Translation",
              "x-type": "Translation"
            },
            "x-type": "List[Translation]"
          },
          "updated_at": {
            "type": "string",
            "x-type": "string"
          },
          "content": {
            "type": "string",
            "x-type": "string"
          },
          "id": {
            "type": "string",
            "x-type": "string"
          }
        }
      },
      "lol-status-v3.Translation": {
        "type": "object",
        "title": "Translation",
        "properties": {
          "locale": {
            "type": "string",
            "x-type": "string"
          },
          "content": {
            "type": "string",
            "x-type": "string"
          },
          "updated_at": {
            "type": "string",
            "x-type": "string"
          }
        }
      },
      "match-v3.MatchDto": {
        "type": "object",
        "title": "MatchDto",
        "properties": {
          "seasonId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "queueId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "gameId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "participantIdentities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/match-v3.ParticipantIdentityDto",
              "x-type": "ParticipantIdentityDto"
            },
            "x-type": "List[ParticipantIdentityDto]"
          },
          "gameVersion": {
            "type": "string",
            "x-type": "string"
          },
          "platformId": {
            "type": "string",
            "x-type": "string"
          },
          "gameMode": {
            "type": "string",
            "x-type": "string"
          },
          "mapId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "gameType": {
            "type": "string",
            "x-type": "string"
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/match-v3.TeamStatsDto",
              "x-type": "TeamStatsDto"
            },
            "x-type": "List[TeamStatsDto]"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/match-v3.ParticipantDto",
              "x-type": "ParticipantDto"
            },
            "x-type": "List[ParticipantDto]"
          },
          "gameDuration": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "gameCreation": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          }
        }
      },
      "match-v3.ParticipantIdentityDto": {
        "type": "object",
        "title": "ParticipantIdentityDto",
        "properties": {
          "player": {
            "$ref": "#/components/schemas/match-v3.PlayerDto",
            "x-type": "PlayerDto"
          },
          "participantId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        }
      },
      "match-v3.PlayerDto": {
        "type": "object",
        "title": "PlayerDto",
        "properties": {
          "currentPlatformId": {
            "type": "string",
            "x-type": "string"
          },
          "summonerName": {
            "type": "string",
            "x-type": "string"
          },
          "matchHistoryUri": {
            "type": "string",
            "x-type": "string"
          },
          "platformId": {
            "type": "string",
            "x-type": "string"
          },
          "currentAccountId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "profileIcon": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "summonerId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          }
        }
      },
      "match-v3.TeamStatsDto": {
        "type": "object",
        "title": "TeamStatsDto",
        "properties": {
          "firstDragon": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "firstInhibitor": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "bans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/match-v3.TeamBansDto",
              "x-type": "TeamBansDto"
            },
            "x-type": "List[TeamBansDto]"
          },
          "baronKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "firstRiftHerald": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "firstBaron": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "riftHeraldKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "firstBlood": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "teamId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "firstTower": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "vilemawKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "inhibitorKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "towerKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "dominionVictoryScore": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "win": {
            "type": "string",
            "x-type": "string"
          },
          "dragonKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        }
      },
      "match-v3.TeamBansDto": {
        "type": "object",
        "title": "TeamBansDto",
        "properties": {
          "pickTurn": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "championId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        }
      },
      "match-v3.ParticipantDto": {
        "type": "object",
        "title": "ParticipantDto",
        "properties": {
          "stats": {
            "$ref": "#/components/schemas/match-v3.ParticipantStatsDto",
            "x-type": "ParticipantStatsDto"
          },
          "participantId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "runes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/match-v3.RuneDto",
              "x-type": "RuneDto"
            },
            "x-type": "List[RuneDto]"
          },
          "timeline": {
            "$ref": "#/components/schemas/match-v3.ParticipantTimelineDto",
            "x-type": "ParticipantTimelineDto"
          },
          "teamId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "spell2Id": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "masteries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/match-v3.MasteryDto",
              "x-type": "MasteryDto"
            },
            "x-type": "List[MasteryDto]"
          },
          "highestAchievedSeasonTier": {
            "type": "string",
            "x-type": "string"
          },
          "spell1Id": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "championId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        }
      },
      "match-v3.ParticipantStatsDto": {
        "type": "object",
        "title": "ParticipantStatsDto",
        "properties": {
          "physicalDamageDealt": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "neutralMinionsKilledTeamJungle": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "magicDamageDealt": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "totalPlayerScore": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "deaths": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "win": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "neutralMinionsKilledEnemyJungle": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "altarsCaptured": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "largestCriticalStrike": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "totalDamageDealt": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "magicDamageDealtToChampions": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "visionWardsBoughtInGame": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "damageDealtToObjectives": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "largestKillingSpree": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "item1": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "quadraKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "teamObjective": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "totalTimeCrowdControlDealt": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "longestTimeSpentLiving": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "wardsKilled": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "firstTowerAssist": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "firstTowerKill": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "item2": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "item3": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "item0": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "firstBloodAssist": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "visionScore": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "wardsPlaced": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "item4": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "item5": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "item6": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "turretKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "tripleKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "damageSelfMitigated": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "champLevel": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "nodeNeutralizeAssist": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "firstInhibitorKill": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "goldEarned": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "magicalDamageTaken": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "kills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "doubleKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "nodeCaptureAssist": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "trueDamageTaken": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "nodeNeutralize": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "firstInhibitorAssist": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "assists": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "unrealKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "neutralMinionsKilled": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "objectivePlayerScore": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "combatPlayerScore": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "damageDealtToTurrets": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "altarsNeutralized": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "physicalDamageDealtToChampions": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "goldSpent": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "trueDamageDealt": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "trueDamageDealtToChampions": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "participantId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "pentaKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "totalHeal": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "totalMinionsKilled": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "firstBloodKill": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "nodeCapture": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "largestMultiKill": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "sightWardsBoughtInGame": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "totalDamageDealtToChampions": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "totalUnitsHealed": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "inhibitorKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "totalScoreRank": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "totalDamageTaken": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "killingSprees": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "timeCCingOthers": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "physicalDamageTaken": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          }
        }
      },
      "match-v3.RuneDto": {
        "type": "object",
        "title": "RuneDto",
        "properties": {
          "runeId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "rank": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        }
      },
      "match-v3.ParticipantTimelineDto": {
        "type": "object",
        "title": "ParticipantTimelineDto",
        "properties": {
          "lane": {
            "type": "string",
            "x-type": "string"
          },
          "participantId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "csDiffPerMinDeltas": {
            "type": "object",
            "x-key": {
              "type": "string",
              "x-type": "string"
            },
            "additionalProperties": {
              "type": "number",
              "format": "double",
              "x-type": "double"
            },
            "x-type": "Map[string, double]"
          },
          "goldPerMinDeltas": {
            "type": "object",
            "x-key": {
              "type": "string",
              "x-type": "string"
            },
            "additionalProperties": {
              "type": "number",
              "format": "double",
              "x-type": "double"
            },
            "x-type": "Map[string, double]"
          },
          "xpDiffPerMinDeltas": {
            "type": "object",
            "x-key": {
              "type": "string",
              "x-type": "string"
            },
            "additionalProperties": {
              "type": "number",
              "format": "double",
              "x-type": "double"
            },
            "x-type": "Map[string, double]"
          },
          "creepsPerMinDeltas": {
            "type": "object",
            "x-key": {
              "type": "string",
              "x-type": "string"
            },
            "additionalProperties": {
              "type": "number",
              "format": "double",
              "x-type": "double"
            },
            "x-type": "Map[string, double]"
          },
          "xpPerMinDeltas": {
            "type": "object",
            "x-key": {
              "type": "string",
              "x-type": "string"
            },
            "additionalProperties": {
              "type": "number",
              "format": "double",
              "x-type": "double"
            },
            "x-type": "Map[string, double]"
          },
          "role": {
            "type": "string",
            "x-type": "string"
          },
          "damageTakenDiffPerMinDeltas": {
            "type": "object",
            "x-key": {
              "type": "string",
              "x-type": "string"
            },
            "additionalProperties": {
              "type": "number",
              "format": "double",
              "x-type": "double"
            },
            "x-type": "Map[string, double]"
          },
          "damageTakenPerMinDeltas": {
            "type": "object",
            "x-key": {
              "type": "string",
              "x-type": "string"
            },
            "additionalProperties": {
              "type": "number",
              "format": "double",
              "x-type": "double"
            },
            "x-type": "Map[string, double]"
          }
        }
      },
      "match-v3.MasteryDto": {
        "type": "object",
        "title": "MasteryDto",
        "properties": {
          "masteryId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "rank": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        }
      },
      "match-v3.MatchlistDto": {
        "type": "object",
        "title": "MatchlistDto",
        "properties": {
          "matches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/match-v3.MatchReferenceDto",
              "x-type": "MatchReferenceDto"
            },
            "x-type": "List[MatchReferenceDto]"
          },
          "totalGames": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "startIndex": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "endIndex": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        }
      },
      "match-v3.MatchReferenceDto": {
        "type": "object",
        "title": "MatchReferenceDto",
        "properties": {
          "lane": {
            "type": "string",
            "x-type": "string"
          },
          "gameId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "champion": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "platformId": {
            "type": "string",
            "x-type": "string"
          },
          "season": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "queue": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "role": {
            "type": "string",
            "x-type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          }
        }
      },
      "match-v3.MatchTimelineDto": {
        "type": "object",
        "title": "MatchTimelineDto",
        "properties": {
          "frames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/match-v3.MatchFrameDto",
              "x-type": "MatchFrameDto"
            },
            "x-type": "List[MatchFrameDto]"
          },
          "frameInterval": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          }
        }
      },
      "match-v3.MatchFrameDto": {
        "type": "object",
        "title": "MatchFrameDto",
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "participantFrames": {
            "type": "object",
            "x-key": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            },
            "additionalProperties": {
              "$ref": "#/components/schemas/match-v3.MatchParticipantFrameDto",
              "x-type": "MatchParticipantFrameDto"
            },
            "x-type": "Map[int, MatchParticipantFrameDto]"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/match-v3.MatchEventDto",
              "x-type": "MatchEventDto"
            },
            "x-type": "List[MatchEventDto]"
          }
        }
      },
      "match-v3.MatchParticipantFrameDto": {
        "type": "object",
        "title": "MatchParticipantFrameDto",
        "properties": {
          "totalGold": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "teamScore": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "participantId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "level": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "currentGold": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "minionsKilled": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "dominionScore": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "position": {
            "$ref": "#/components/schemas/match-v3.MatchPositionDto",
            "x-type": "MatchPositionDto"
          },
          "xp": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "jungleMinionsKilled": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        }
      },
      "match-v3.MatchPositionDto": {
        "type": "object",
        "title": "MatchPositionDto",
        "properties": {
          "y": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "x": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        }
      },
      "match-v3.MatchEventDto": {
        "type": "object",
        "title": "MatchEventDto",
        "properties": {
          "eventType": {
            "type": "string",
            "x-type": "string"
          },
          "towerType": {
            "type": "string",
            "x-type": "string"
          },
          "teamId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "ascendedType": {
            "type": "string",
            "x-type": "string"
          },
          "killerId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "levelUpType": {
            "type": "string",
            "x-type": "string"
          },
          "pointCaptured": {
            "type": "string",
            "x-type": "string"
          },
          "assistingParticipantIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            },
            "x-type": "List[int]"
          },
          "wardType": {
            "type": "string",
            "x-type": "string"
          },
          "monsterType": {
            "type": "string",
            "x-type": "string"
          },
          "type": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "CHAMPION_KILL",
              "WARD_PLACED",
              "WARD_KILL",
              "BUILDING_KILL",
              "ELITE_MONSTER_KILL",
              "ITEM_PURCHASED",
              "ITEM_SOLD",
              "ITEM_DESTROYED",
              "ITEM_UNDO",
              "SKILL_LEVEL_UP",
              "ASCENDED_EVENT",
              "CAPTURE_POINT",
              "PORO_KING_SUMMON"
            ],
            "description": "(Legal values:  CHAMPION_KILL,  WARD_PLACED,  WARD_KILL,  BUILDING_KILL,  ELITE_MONSTER_KILL,  ITEM_PURCHASED,  ITEM_SOLD,  ITEM_DESTROYED,  ITEM_UNDO,  SKILL_LEVEL_UP,  ASCENDED_EVENT,  CAPTURE_POINT,  PORO_KING_SUMMON)"
          },
          "skillSlot": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "victimId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "afterId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "monsterSubType": {
            "type": "string",
            "x-type": "string"
          },
          "laneType": {
            "type": "string",
            "x-type": "string"
          },
          "itemId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "participantId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "buildingType": {
            "type": "string",
            "x-type": "string"
          },
          "creatorId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "position": {
            "$ref": "#/components/schemas/match-v3.MatchPositionDto",
            "x-type": "MatchPositionDto"
          },
          "beforeId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        }
      },
      "spectator-v3.CurrentGameInfo": {
        "type": "object",
        "title": "CurrentGameInfo",
        "properties": {
          "gameId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the game"
          },
          "gameStartTime": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The game start time represented in epoch milliseconds"
          },
          "platformId": {
            "type": "string",
            "x-type": "string",
            "description": "The ID of the platform on which the game is being played"
          },
          "gameMode": {
            "type": "string",
            "x-type": "string",
            "description": "The game mode"
          },
          "mapId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the map"
          },
          "gameType": {
            "type": "string",
            "x-type": "string",
            "description": "The game type"
          },
          "bannedChampions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/spectator-v3.BannedChampion",
              "x-type": "BannedChampion"
            },
            "x-type": "List[BannedChampion]",
            "description": "Banned champion information"
          },
          "observers": {
            "$ref": "#/components/schemas/spectator-v3.Observer",
            "x-type": "Observer",
            "description": "The observer information"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/spectator-v3.CurrentGameParticipant",
              "x-type": "CurrentGameParticipant"
            },
            "x-type": "List[CurrentGameParticipant]",
            "description": "The participant information"
          },
          "gameLength": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The amount of time in seconds that has passed since the game started"
          },
          "gameQueueConfigId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The queue type (queue types are documented on the Game Constants page)"
          }
        }
      },
      "spectator-v3.BannedChampion": {
        "type": "object",
        "title": "BannedChampion",
        "properties": {
          "pickTurn": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "The turn during which the champion was banned"
          },
          "championId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the banned champion"
          },
          "teamId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the team that banned the champion"
          }
        }
      },
      "spectator-v3.Observer": {
        "type": "object",
        "title": "Observer",
        "properties": {
          "encryptionKey": {
            "type": "string",
            "x-type": "string",
            "description": "Key used to decrypt the spectator grid game data for playback"
          }
        }
      },
      "spectator-v3.CurrentGameParticipant": {
        "type": "object",
        "title": "CurrentGameParticipant",
        "properties": {
          "profileIconId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the profile icon used by this participant"
          },
          "championId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the champion played by this participant"
          },
          "summonerName": {
            "type": "string",
            "x-type": "string",
            "description": "The summoner name of this participant"
          },
          "gameCustomizationObjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/spectator-v3.GameCustomizationObject",
              "x-type": "GameCustomizationObject"
            },
            "x-type": "List[GameCustomizationObject]",
            "description": "List of Game Customizations"
          },
          "bot": {
            "type": "boolean",
            "x-type": "boolean",
            "description": "Flag indicating whether or not this participant is a bot"
          },
          "perks": {
            "$ref": "#/components/schemas/spectator-v3.Perks",
            "x-type": "Perks",
            "description": "Perks/Runes Reforged Information"
          },
          "spell2Id": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the second summoner spell used by this participant"
          },
          "teamId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The team ID of this participant, indicating the participant's team"
          },
          "spell1Id": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the first summoner spell used by this participant"
          },
          "summonerId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The summoner ID of this participant"
          }
        }
      },
      "spectator-v3.GameCustomizationObject": {
        "type": "object",
        "title": "GameCustomizationObject",
        "properties": {
          "category": {
            "type": "string",
            "x-type": "string",
            "description": "Category identifier for Game Customization"
          },
          "content": {
            "type": "string",
            "x-type": "string",
            "description": "Game Customization content"
          }
        }
      },
      "spectator-v3.Perks": {
        "type": "object",
        "title": "Perks",
        "properties": {
          "perkStyle": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Primary runes path"
          },
          "perkIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "x-type": "Long"
            },
            "x-type": "List[Long]",
            "description": "IDs of the perks/runes assigned."
          },
          "perkSubStyle": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Secondary runes path"
          }
        }
      },
      "spectator-v3.FeaturedGames": {
        "type": "object",
        "title": "FeaturedGames",
        "properties": {
          "clientRefreshInterval": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The suggested interval to wait before requesting FeaturedGames again"
          },
          "gameList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/spectator-v3.FeaturedGameInfo",
              "x-type": "FeaturedGameInfo"
            },
            "x-type": "List[FeaturedGameInfo]",
            "description": "The list of featured games"
          }
        }
      },
      "spectator-v3.FeaturedGameInfo": {
        "type": "object",
        "title": "FeaturedGameInfo",
        "properties": {
          "gameId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the game"
          },
          "gameStartTime": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The game start time represented in epoch milliseconds"
          },
          "platformId": {
            "type": "string",
            "x-type": "string",
            "description": "The ID of the platform on which the game is being played"
          },
          "gameMode": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "CLASSIC",
              "ODIN",
              "ARAM",
              "TUTORIAL",
              "ONEFORALL",
              "ASCENSION",
              "FIRSTBLOOD",
              "KINGPORO"
            ],
            "description": "The game mode\n             (Legal values:  CLASSIC,  ODIN,  ARAM,  TUTORIAL,  ONEFORALL,  ASCENSION,  FIRSTBLOOD,  KINGPORO)"
          },
          "mapId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the map"
          },
          "gameType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "CUSTOM_GAME",
              "MATCHED_GAME",
              "TUTORIAL_GAME"
            ],
            "description": "The game type\n             (Legal values:  CUSTOM_GAME,  MATCHED_GAME,  TUTORIAL_GAME)"
          },
          "bannedChampions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/spectator-v3.BannedChampion",
              "x-type": "BannedChampion"
            },
            "x-type": "List[BannedChampion]",
            "description": "Banned champion information"
          },
          "observers": {
            "$ref": "#/components/schemas/spectator-v3.Observer",
            "x-type": "Observer",
            "description": "The observer information"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/spectator-v3.Participant",
              "x-type": "Participant"
            },
            "x-type": "List[Participant]",
            "description": "The participant information"
          },
          "gameLength": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The amount of time in seconds that has passed since the game started"
          },
          "gameQueueConfigId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The queue type (queue types are documented on the Game Constants page)"
          }
        }
      },
      "spectator-v3.Participant": {
        "type": "object",
        "title": "Participant",
        "properties": {
          "profileIconId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the profile icon used by this participant"
          },
          "championId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the champion played by this participant"
          },
          "summonerName": {
            "type": "string",
            "x-type": "string",
            "description": "The summoner name of this participant"
          },
          "bot": {
            "type": "boolean",
            "x-type": "boolean",
            "description": "Flag indicating whether or not this participant is a bot"
          },
          "spell2Id": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the second summoner spell used by this participant"
          },
          "teamId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The team ID of this participant, indicating the participant's team"
          },
          "spell1Id": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the first summoner spell used by this participant"
          }
        }
      },
      "summoner-v3.SummonerDTO": {
        "type": "object",
        "title": "SummonerDTO",
        "properties": {
          "profileIconId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "ID of the summoner icon associated with the summoner."
          },
          "name": {
            "type": "string",
            "x-type": "string",
            "description": "Summoner name."
          },
          "summonerLevel": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Summoner level associated with the summoner."
          },
          "revisionDate": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: profile icon change, playing the tutorial or advanced tutorial, finishing a game, summoner name change"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Summoner ID."
          },
          "accountId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Account ID."
          }
        },
        "description": "represents a summoner"
      },
      "tournament-stub-v3.TournamentCodeParameters": {
        "type": "object",
        "title": "TournamentCodeParameters",
        "properties": {
          "spectatorType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "NONE",
              "LOBBYONLY",
              "ALL"
            ],
            "description": "The spectator type of the game.\n             (Legal values:  NONE,  LOBBYONLY,  ALL)"
          },
          "teamSize": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "minimum": 1,
            "maximum": 5,
            "description": "The team size of the game. Valid values are 1-5."
          },
          "pickType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "BLIND_PICK",
              "DRAFT_MODE",
              "ALL_RANDOM",
              "TOURNAMENT_DRAFT"
            ],
            "description": "The pick type of the game.\n             (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)"
          },
          "allowedSummonerIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "x-type": "Set[long]",
            "description": "Optional list of participants in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future."
          },
          "mapType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "SUMMONERS_RIFT",
              "TWISTED_TREELINE",
              "HOWLING_ABYSS"
            ],
            "description": "The map type of the game.\n             (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)"
          },
          "metadata": {
            "type": "string",
            "x-type": "string",
            "description": "Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game."
          }
        }
      },
      "tournament-stub-v3.LobbyEventDTOWrapper": {
        "type": "object",
        "title": "LobbyEventDTOWrapper",
        "properties": {
          "eventList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tournament-stub-v3.LobbyEventDTO",
              "x-type": "LobbyEventDTO"
            },
            "x-type": "List[LobbyEventDTO]"
          }
        }
      },
      "tournament-stub-v3.LobbyEventDTO": {
        "type": "object",
        "title": "LobbyEventDTO",
        "properties": {
          "eventType": {
            "type": "string",
            "x-type": "string",
            "description": "The type of event that was triggered"
          },
          "summonerId": {
            "type": "string",
            "x-type": "string",
            "description": "The summoner that triggered the event"
          },
          "timestamp": {
            "type": "string",
            "x-type": "string",
            "description": "Timestamp from the event"
          }
        }
      },
      "tournament-stub-v3.ProviderRegistrationParameters": {
        "type": "object",
        "title": "ProviderRegistrationParameters",
        "properties": {
          "url": {
            "type": "string",
            "x-type": "string",
            "description": "The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443)."
          },
          "region": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "BR",
              "EUNE",
              "EUW",
              "JP",
              "LAN",
              "LAS",
              "NA",
              "OCE",
              "PBE",
              "RU",
              "TR"
            ],
            "description": "The region in which the provider will be running tournaments.\n             (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)"
          }
        }
      },
      "tournament-stub-v3.TournamentRegistrationParameters": {
        "type": "object",
        "title": "TournamentRegistrationParameters",
        "properties": {
          "providerId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "The provider ID to specify the regional registered provider data to associate this tournament."
          },
          "name": {
            "type": "string",
            "x-type": "string",
            "description": "The optional name of the tournament."
          }
        }
      },
      "tournament-v3.TournamentCodeParameters": {
        "type": "object",
        "title": "TournamentCodeParameters",
        "properties": {
          "spectatorType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "NONE",
              "LOBBYONLY",
              "ALL"
            ],
            "description": "The spectator type of the game.\n             (Legal values:  NONE,  LOBBYONLY,  ALL)"
          },
          "teamSize": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "minimum": 1,
            "maximum": 5,
            "description": "The team size of the game. Valid values are 1-5."
          },
          "pickType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "BLIND_PICK",
              "DRAFT_MODE",
              "ALL_RANDOM",
              "TOURNAMENT_DRAFT"
            ],
            "description": "The pick type of the game.\n             (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)"
          },
          "allowedSummonerIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "x-type": "Set[long]",
            "description": "Optional list of participants in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future."
          },
          "mapType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "SUMMONERS_RIFT",
              "TWISTED_TREELINE",
              "HOWLING_ABYSS"
            ],
            "description": "The map type of the game.\n             (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)"
          },
          "metadata": {
            "type": "string",
            "x-type": "string",
            "description": "Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game."
          }
        }
      },
      "tournament-v3.TournamentCodeUpdateParameters": {
        "type": "object",
        "title": "TournamentCodeUpdateParameters",
        "properties": {
          "spectatorType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "NONE",
              "LOBBYONLY",
              "ALL"
            ],
            "description": "The spectator type\n             (Legal values:  NONE,  LOBBYONLY,  ALL)"
          },
          "pickType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "BLIND_PICK",
              "DRAFT_MODE",
              "ALL_RANDOM",
              "TOURNAMENT_DRAFT"
            ],
            "description": "The pick type\n             (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)"
          },
          "allowedSummonerIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "x-type": "Set[long]",
            "description": "Optional list of participants in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future."
          },
          "mapType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "SUMMONERS_RIFT",
              "TWISTED_TREELINE",
              "HOWLING_ABYSS"
            ],
            "description": "The map type\n             (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)"
          }
        }
      },
      "tournament-v3.TournamentCodeDTO": {
        "type": "object",
        "title": "TournamentCodeDTO",
        "properties": {
          "map": {
            "type": "string",
            "x-type": "string",
            "description": "The game map for the tournament code game"
          },
          "code": {
            "type": "string",
            "x-type": "string",
            "description": "The tournament code."
          },
          "spectators": {
            "type": "string",
            "x-type": "string",
            "description": "The spectator mode for the tournament code game."
          },
          "region": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "BR",
              "EUNE",
              "EUW",
              "JP",
              "LAN",
              "LAS",
              "NA",
              "OCE",
              "PBE",
              "RU",
              "TR"
            ],
            "description": "The tournament code's region.\n             (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)"
          },
          "providerId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "The provider's ID."
          },
          "teamSize": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "The team size for the tournament code game."
          },
          "participants": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "x-type": "Set[long]"
          },
          "pickType": {
            "type": "string",
            "x-type": "string",
            "description": "The pick mode for tournament code game."
          },
          "tournamentId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "The tournament's ID."
          },
          "lobbyName": {
            "type": "string",
            "x-type": "string",
            "description": "The lobby name for the tournament code game."
          },
          "password": {
            "type": "string",
            "x-type": "string",
            "description": "The password for the tournament code game."
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "The tournament code's ID."
          },
          "metaData": {
            "type": "string",
            "x-type": "string",
            "description": "The metadata for tournament code."
          }
        }
      },
      "tournament-v3.LobbyEventDTOWrapper": {
        "type": "object",
        "title": "LobbyEventDTOWrapper",
        "properties": {
          "eventList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tournament-v3.LobbyEventDTO",
              "x-type": "LobbyEventDTO"
            },
            "x-type": "List[LobbyEventDTO]"
          }
        }
      },
      "tournament-v3.LobbyEventDTO": {
        "type": "object",
        "title": "LobbyEventDTO",
        "properties": {
          "eventType": {
            "type": "string",
            "x-type": "string",
            "description": "The type of event that was triggered"
          },
          "summonerId": {
            "type": "string",
            "x-type": "string",
            "description": "The summoner that triggered the event"
          },
          "timestamp": {
            "type": "string",
            "x-type": "string",
            "description": "Timestamp from the event"
          }
        }
      },
      "tournament-v3.ProviderRegistrationParameters": {
        "type": "object",
        "title": "ProviderRegistrationParameters",
        "properties": {
          "url": {
            "type": "string",
            "x-type": "string",
            "description": "The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443)."
          },
          "region": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "BR",
              "EUNE",
              "EUW",
              "JP",
              "LAN",
              "LAS",
              "NA",
              "OCE",
              "PBE",
              "RU",
              "TR"
            ],
            "description": "The region in which the provider will be running tournaments.\n             (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)"
          }
        }
      },
      "tournament-v3.TournamentRegistrationParameters": {
        "type": "object",
        "title": "TournamentRegistrationParameters",
        "properties": {
          "providerId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "The provider ID to specify the regional registered provider data to associate this tournament."
          },
          "name": {
            "type": "string",
            "x-type": "string",
            "description": "The optional name of the tournament."
          }
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "description": "API key in query param.",
        "name": "api_key",
        "in": "query"
      },
      "X-Riot-Token": {
        "type": "apiKey",
        "description": "API key in header.",
        "name": "X-Riot-Token",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "api_key": []
    },
    {
      "X-Riot-Token": []
    }
  ]
}